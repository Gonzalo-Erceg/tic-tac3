/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 x.gltf 
*/



import { useRef,useEffect,useState } from "react"
import { useStore } from "../hooks/useStore"

import gsap from "gsap/gsap-core"

import { useGLTF } from '@react-three/drei'

export default function X(props) {
  const { nodes, materials } = useGLTF('/x.gltf')
  const ref = useRef()    

  const [clicked,setClicked] = useState(false)
  useEffect(()=>{gsap.fromTo(ref.current?.position,{y:props.pos[1]  + 1},{y:props.pos[1]})},[])
  const [addCube,cubes] = useStore(state=>[state.addCube, state.cubes])

  useEffect(()=>{if(!cubes.length){
      setClicked(false)}
      
      
  },[cubes])

  const handle = (e)=>{
      e.stopPropagation()
      
      
      if(!clicked && props.pos[1] < 4){
          
          
          const id = props.pos[1] > 0 ? props.id + 16 : props.id*1
   
          addCube(props.pos[0],props.pos[1] +1,props.pos[2],id)
        
          setClicked(true)
          
      }

   
  }
  return (

      <mesh geometry={nodes.Cube002.geometry} material={materials['Material.003']} ref={ref} onClick={handle} position={props.pos} scale={[0.5, 0.5, 0.251]} castShadow receiveShadow/>

  )
}

useGLTF.preload('/x.gltf')
